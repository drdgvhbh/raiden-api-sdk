// tslint:disable
/**
 * Raiden API
 * https://raiden-network.readthedocs.io/en/stable/rest_api.html
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from "rxjs";
import {
  BaseAPI,
  throwIfRequired,
  HttpHeaders,
  HttpQuery,
  COLLECTION_FORMATS
} from "../runtime";
import { Channel, Errors } from "../models";

export interface GetChannelsForTokenRequest {
  tokenAddress: string;
}

export interface GetPartnerChannelRequest {
  tokenAddress: string;
  partnerAddress: string;
}

/**
 * no description
 */
export class ChannelsApi extends BaseAPI {
  /**
   * List of all unsettled channels
   */
  getChannels = (): Observable<Array<Channel>> => {
    const headers: HttpHeaders = {};

    const query: HttpQuery = {};

    return this.request<Array<Channel>>({
      path: `/channels`,
      method: "GET",
      headers,
      query
    });
  };

  /**
   * List of all unsettled channels for the given token address.
   */
  getChannelsForToken = (
    requestParameters: GetChannelsForTokenRequest
  ): Observable<Array<Channel>> => {
    throwIfRequired(requestParameters, "tokenAddress", "getChannelsForToken");

    const headers: HttpHeaders = {};

    const query: HttpQuery = {};

    return this.request<Array<Channel>>({
      path: `/channels/{token_address}`.replace(
        `{token_address}`,
        encodeURIComponent(String(requestParameters.tokenAddress))
      ),
      method: "GET",
      headers,
      query
    });
  };

  /**
   * The channel is specified by the address of the token and the partnerâ€™s address.
   * Query information about one of your channels.
   */
  getPartnerChannel = (
    requestParameters: GetPartnerChannelRequest
  ): Observable<Channel> => {
    throwIfRequired(requestParameters, "tokenAddress", "getPartnerChannel");
    throwIfRequired(requestParameters, "partnerAddress", "getPartnerChannel");

    const headers: HttpHeaders = {};

    const query: HttpQuery = {};

    return this.request<Channel>({
      path: `/channels/{token_address}/{partner_address}`
        .replace(
          `{token_address}`,
          encodeURIComponent(String(requestParameters.tokenAddress))
        )
        .replace(
          `{partner_address}`,
          encodeURIComponent(String(requestParameters.partnerAddress))
        ),
      method: "GET",
      headers,
      query
    });
  };
}
