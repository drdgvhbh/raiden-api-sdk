// tslint:disable
/**
 * Raiden API
 * https://raiden-network.readthedocs.io/en/stable/rest_api.html
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import {
  BaseAPI,
  throwIfRequired,
  HttpHeaders,
  HttpQuery,
  COLLECTION_FORMATS,
} from '../runtime';
import { Channel, ChannelPartial, Errors, InlineObject } from '../models';

export interface GetChannelsForTokenRequest {
  token_address: string;
}

export interface GetPartnerChannelRequest {
  token_address: string;
  partner_address: string;
}

export interface OpenChannelRequest {
  ChannelPartial: ChannelPartial;
}

export interface PatchChannelRequest {
  token_address: string;
  partner_address: string;
  InlineObject: InlineObject;
}

/**
 * no description
 */
export class ChannelsApi extends BaseAPI {
  /**
   * List of all unsettled channels
   */
  getChannels = (): Observable<Array<Channel>> => {
    const headers: HttpHeaders = {};

    const query: HttpQuery = {};

    return this.request<Array<Channel>>({
      path: `/channels`,
      method: 'GET',
      headers,
      query,
    });
  };

  /**
   * List of all unsettled channels for the given token address.
   */
  getChannelsForToken = (
    requestParameters: GetChannelsForTokenRequest,
  ): Observable<Array<Channel>> => {
    throwIfRequired(requestParameters, 'token_address', 'getChannelsForToken');

    const headers: HttpHeaders = {};

    const query: HttpQuery = {};

    return this.request<Array<Channel>>({
      path: `/channels/{token_address}`.replace(
        `{token_address}`,
        encodeURIComponent(String(requestParameters.token_address)),
      ),
      method: 'GET',
      headers,
      query,
    });
  };

  /**
   * The channel is specified by the address of the token and the partnerâ€™s address.
   * Query information about one of your channels.
   */
  getPartnerChannel = (
    requestParameters: GetPartnerChannelRequest,
  ): Observable<Channel> => {
    throwIfRequired(requestParameters, 'token_address', 'getPartnerChannel');
    throwIfRequired(requestParameters, 'partner_address', 'getPartnerChannel');

    const headers: HttpHeaders = {};

    const query: HttpQuery = {};

    return this.request<Channel>({
      path: `/channels/{token_address}/{partner_address}`
        .replace(
          `{token_address}`,
          encodeURIComponent(String(requestParameters.token_address)),
        )
        .replace(
          `{partner_address}`,
          encodeURIComponent(String(requestParameters.partner_address)),
        ),
      method: 'GET',
      headers,
      query,
    });
  };

  /**
   * Opens a channel
   */
  openChannel = (
    requestParameters: OpenChannelRequest,
  ): Observable<Channel> => {
    throwIfRequired(requestParameters, 'ChannelPartial', 'openChannel');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    const query: HttpQuery = {};

    return this.request<Channel>({
      path: `/channels`,
      method: 'PUT',
      headers,
      query,
      body: requestParameters.ChannelPartial,
    });
  };

  /**
   * Close a channel or to increase the deposit in it.
   */
  patchChannel = (
    requestParameters: PatchChannelRequest,
  ): Observable<Channel> => {
    throwIfRequired(requestParameters, 'token_address', 'patchChannel');
    throwIfRequired(requestParameters, 'partner_address', 'patchChannel');
    throwIfRequired(requestParameters, 'InlineObject', 'patchChannel');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    const query: HttpQuery = {};

    return this.request<Channel>({
      path: `/channels/{token_address}/{partner_address}`
        .replace(
          `{token_address}`,
          encodeURIComponent(String(requestParameters.token_address)),
        )
        .replace(
          `{partner_address}`,
          encodeURIComponent(String(requestParameters.partner_address)),
        ),
      method: 'PATCH',
      headers,
      query,
      body: requestParameters.InlineObject,
    });
  };
}
